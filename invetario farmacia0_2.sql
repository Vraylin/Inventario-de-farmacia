CREATE DATABASE FARMACIA1;
GO
USE FARMACIA1;
GO

-- TABLA GERENTE
CREATE TABLE GERENTE (
    ID_GERENTE INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_GERENTE VARCHAR(50) NOT NULL,
    CARGO VARCHAR(50) NOT NULL,
    TELEFONO VARCHAR(15),
    FECHA_REGISTRO DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    FECHA_CREACION DATETIME DEFAULT GETDATE(),
    USUARIO_CREACION VARCHAR(50) DEFAULT SUSER_SNAME()
);
INSERT INTO GERENTE (NOMBRE_GERENTE, CARGO, TELEFONO) VALUES
('ANA MARTÍNEZ', 'GERENTE GENERAL', '809-123-4567'),
('LUIS GÓMEZ', 'GERENTE DE OPERACIONES', '809-234-5678'),
('MARÍA PÉREZ', 'GERENTE DE VENTAS', '809-345-6789');
GO

-- TABLA EMPLEADOS
CREATE TABLE EMPLEADOS (
    ID_EMPLEADO INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_EMPLEADO VARCHAR(50) NOT NULL,
    CARGO VARCHAR(50) NOT NULL,
    TELEFONO VARCHAR(15),
    FECHA_REGISTRO DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    ID_GERENTE INT,
    FECHA_CREACION DATETIME DEFAULT GETDATE(),
    USUARIO_CREACION VARCHAR(50) DEFAULT SUSER_SNAME(),
    FOREIGN KEY (ID_GERENTE) REFERENCES GERENTE(ID_GERENTE)
);
INSERT INTO EMPLEADOS (NOMBRE_EMPLEADO, CARGO, TELEFONO, ID_GERENTE) VALUES
('CARLOS RAMÍREZ', 'CAJERO', '809-111-2222', 1),
('PAOLA SANTANA', 'AUXILIAR', '809-111-3333', 2),
('JAVIER JIMÉNEZ', 'VENDEDOR', '809-111-4444', 3),
('ESTEFANÍA TORRES', 'CAJERO', '809-111-5555', 1),
('MIGUEL CASTILLO', 'AUXILIAR', '809-111-6666', 2);
GO

-- TABLA CLIENTES
CREATE TABLE CLIENTES (
    ID_CLIENTE INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_CLIENTE VARCHAR(50),
    TELEFONO VARCHAR(15),
    DIRECCION VARCHAR(100),
    TIPO_CLIENTE VARCHAR(20) NOT NULL DEFAULT 'OCASIONAL',
    FECHA_REGISTRO DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    FECHA_CREACION DATETIME DEFAULT GETDATE(),
    USUARIO_CREACION VARCHAR(50) DEFAULT SUSER_SNAME()
);
INSERT INTO CLIENTES (NOMBRE_CLIENTE, TELEFONO, DIRECCION, TIPO_CLIENTE) VALUES
('ANTONIO VARGAS', '809-222-1111', 'CALLE DUARTE #10', 'FRECUENTE'),
('LUCÍA HERNÁNDEZ', '809-222-2222', 'AV. INDEPENDENCIA #25', 'OCASIONAL'),
('PEDRO SUÁREZ', '809-222-3333', 'CALLE MELLA #47', 'FRECUENTE'),
('SANDRA ORTIZ', '809-222-4444', 'CALLE 30 DE MARZO #15', 'OCASIONAL');
GO

-- TABLA SUPLIDORES
CREATE TABLE SUPLIDORES (
    ID_SUPLIDOR INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_EMPRESA VARCHAR(50) NOT NULL,
    TELEFONO VARCHAR(15),
    FECHA_REGISTRO DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    FECHA_CREACION DATETIME DEFAULT GETDATE(),
    USUARIO_CREACION VARCHAR(50) DEFAULT SUSER_SNAME()
);
INSERT INTO SUPLIDORES (NOMBRE_EMPRESA, TELEFONO) VALUES
('DISTRIBUIDORA FARMAPLUS', '809-555-1001'),
('SUPLIDORES DEL CARIBE', '809-555-1002'),
('LABORATORIOS MEDSOL', '809-555-1003');
GO

-- TABLA PRODUCTOS
CREATE TABLE PRODUCTOS (
    ID_PRODUCTO INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_PRODUCTO VARCHAR(50) NOT NULL,
    PRECIO DECIMAL(10,2) NOT NULL CHECK (PRECIO >= 0),
    STOCK INT NOT NULL CHECK (STOCK >= 0),
    FECHA_REGISTRO DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    FECHA_VENCIMIENTO DATE,
    UNIDAD_MEDIDA VARCHAR(10),
    PRECIO_MAYOR DECIMAL(10,2) CHECK (PRECIO_MAYOR >= 0),
    PRECIO_DETALLE DECIMAL(10,2) CHECK (PRECIO_DETALLE >= 0),
    FECHA_CREACION DATETIME DEFAULT GETDATE(),
    USUARIO_CREACION VARCHAR(50) DEFAULT SUSER_SNAME()
);
INSERT INTO PRODUCTOS (NOMBRE_PRODUCTO, PRECIO, STOCK, FECHA_VENCIMIENTO, UNIDAD_MEDIDA, PRECIO_MAYOR, PRECIO_DETALLE) VALUES
('PARACETAMOL 500MG', 80.00, 120, '2026-05-30', 'CAJA', 70.00, 85.00),
('IBUPROFENO 400MG', 95.00, 100, '2026-12-15', 'CAJA', 85.00, 100.00),
('VITAMINA C 1000MG', 60.00, 80, '2025-11-25', 'CAJA', 55.00, 65.00),
('AMBROXOL JARABE', 120.00, 50, '2025-10-10', 'FRASCO', 110.00, 125.00),
('ALCOHOL 70%', 45.00, 60, '2027-03-28', 'FRASCO', 40.00, 50.00);
GO

-- ÍNDICES ADICIONALES
CREATE INDEX IDX_PRODUCTO_NOMBRE ON PRODUCTOS(NOMBRE_PRODUCTO);
CREATE INDEX IDX_CLIENTE_NOMBRE ON CLIENTES(NOMBRE_CLIENTE);
CREATE INDEX IDX_CAJA_FECHA_VENTA ON CAJA(FECHA_VENTA);
GO

-- TABLA COMPRAS_SUPLIDORES
CREATE TABLE COMPRAS_SUPLIDORES (
    ID_COMPRA_SUPLIDOR INT PRIMARY KEY IDENTITY(1,1),
    ID_SUPLIDOR INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    CANTIDAD INT NOT NULL CHECK (CANTIDAD >= 0),
    PRECIO_UNITARIO DECIMAL(10,2) CHECK (PRECIO_UNITARIO >= 0),
    FECHA_COMPRA DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    FOREIGN KEY (ID_SUPLIDOR) REFERENCES SUPLIDORES(ID_SUPLIDOR),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
);
INSERT INTO COMPRAS_SUPLIDORES (ID_SUPLIDOR, ID_PRODUCTO, CANTIDAD, PRECIO_UNITARIO) VALUES
(1, 1, 50, 70.00),
(2, 2, 40, 85.00),
(3, 3, 30, 55.00),
(1, 4, 20, 110.00),
(2, 5, 25, 40.00);
GO

-- TABLA CAJA (VENTAS)
CREATE TABLE CAJA (
    ID_VENTA INT PRIMARY KEY IDENTITY(1,1),
    ID_PRODUCTO INT NOT NULL,
    CANTIDAD INT NOT NULL CHECK (CANTIDAD >= 0),
    PRECIO_UNITARIO DECIMAL(10,2) CHECK (PRECIO_UNITARIO >= 0),
    FECHA_VENTA DATE NOT NULL DEFAULT CAST(GETDATE() AS DATE),
    ID_EMPLEADO INT NOT NULL,
    ID_CLIENTE INT,
    FOREIGN KEY (ID_EMPLEADO) REFERENCES EMPLEADOS(ID_EMPLEADO),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO),
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTE)
);
INSERT INTO CAJA (ID_PRODUCTO, CANTIDAD, PRECIO_UNITARIO, ID_EMPLEADO, ID_CLIENTE) VALUES
(1, 2, 85.00, 1, 1),
(2, 1, 100.00, 3, 2),
(3, 3, 65.00, 2, 3),
(4, 1, 125.00, 4, NULL),
(5, 4, 50.00, 5, 4);
GO

-- TABLA TIPOS_PAGO
CREATE TABLE TIPOS_PAGO (
    ID_TIPO_PAGO INT PRIMARY KEY IDENTITY(1,1),
    NOMBRE_TIPO VARCHAR(50) NOT NULL UNIQUE
);
INSERT INTO TIPOS_PAGO (NOMBRE_TIPO) VALUES
('EFECTIVO'),
('TARJETA CRÉDITO'),-
('TARJETA DÉBITO'),
('TRANSFERENCIA BANCARIA'),
('CHEQUE');
GO

-- TABLA PAGOS_VENTAS
CREATE TABLE PAGOS_VENTAS (
    ID_PAGO_VENTA INT PRIMARY KEY IDENTITY(1,1),
    ID_VENTA INT NOT NULL,
    MONTO DECIMAL(10,2) NOT NULL CHECK (MONTO > 0),
    FECHA_PAGO DATETIME NOT NULL DEFAULT GETDATE(),
    ID_TIPO_PAGO INT NOT NULL,
    FOREIGN KEY (ID_VENTA) REFERENCES CAJA(ID_VENTA),
    FOREIGN KEY (ID_TIPO_PAGO) REFERENCES TIPOS_PAGO(ID_TIPO_PAGO)
);
INSERT INTO PAGOS_VENTAS (ID_VENTA, MONTO, ID_TIPO_PAGO) VALUES
(1, 170.00, 1),
(2, 100.00, 2),
(3, 195.00, 3),
(4, 125.00, 1),
(5, 200.00, 4);
GO

-- TRIGGER PARA CONTROL DE STOCK: EVITA STOCK NEGATIVO EN VENTA
CREATE TRIGGER TRG_CAJA_STOCK ON CAJA
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT 1
        FROM PRODUCTOS P
        INNER JOIN INSERTED I ON P.ID_PRODUCTO = I.ID_PRODUCTO
        WHERE P.STOCK < I.CANTIDAD
    )
    BEGIN
        RAISERROR('No hay suficiente stock para esta venta.', 16, 1);
        ROLLBACK TRANSACTION;
        RETURN;
    END

    UPDATE P
    SET P.STOCK = P.STOCK - I.CANTIDAD
    FROM PRODUCTOS P
    INNER JOIN INSERTED I ON P.ID_PRODUCTO = I.ID_PRODUCTO;
END
GO
.
CREATE PROCEDURE SP_VerMovimientoDinero_BalanceNeto
    @FechaInicio DATE = NULL, -- Parámetro opcional: Fecha de inicio del período.
    @FechaFin DATE = NULL     -- Parámetro opcional: Fecha de fin del período.
AS
BEGIN
    SET NOCOUNT ON; -- Evita que se muestren mensajes de recuento de filas afectados.

    -- Si no se proporcionan fechas, se usará el primer y último día del mes actual por defecto.
    IF @FechaInicio IS NULL
        SET @FechaInicio = DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0); -- Primer día del mes actual
    IF @FechaFin IS NULL
        SET @FechaFin = EOMONTH(GETDATE()); -- Último día del mes actual

    DECLARE @TotalIngresos DECIMAL(18, 2);
    SELECT @TotalIngresos = ISNULL(SUM(PV.MONTO), 0)
    FROM CAJA C
    INNER JOIN PAGOS_VENTAS PV ON C.ID_VENTA = PV.ID_VENTA
    WHERE C.FECHA_VENTA >= @FechaInicio AND C.FECHA_VENTA <= @FechaFin;

    -- Calcular el total de egresos por compras a suplidores
    -- Sumamos el 'CANTIDAD * PRECIO_UNITARIO' de la tabla COMPRAS_SUPLIDORES.
    DECLARE @TotalEgresos DECIMAL(18, 2);
    SELECT @TotalEgresos = ISNULL(SUM(CS.CANTIDAD * CS.PRECIO_UNITARIO), 0)
    FROM COMPRAS_SUPLIDORES CS
    WHERE CS.FECHA_COMPRA >= @FechaInicio AND CS.FECHA_COMPRA <= @FechaFin;

    -- Calcular el balance neto
    DECLARE @BalanceNeto DECIMAL(18, 2);
    SET @BalanceNeto = @TotalIngresos - @TotalEgresos;

    -- Mostrar el resumen del balance
    SELECT
        @FechaInicio AS Fecha_Inicio_Periodo,
        @FechaFin AS Fecha_Fin_Periodo,
        @TotalIngresos AS Total_Ingresos_por_Ventas,
        @TotalEgresos AS Total_Egresos_por_Compras,
        @BalanceNeto AS Balance_Neto_del_Periodo;
END;
GO